<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basics of Web Development</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Basics of Web Development</h1>
        
        <div class="section">
            <h2 class="section-title">Objective:</h2>
            <ul>
                <li>Learn and apply foundational HTML, CSS, and JavaScript concepts.</li>
            </ul>
        </div>
        
        <div class="section">
            <h2 class="section-title">Steps:</h2>
            <ol>
                <li>
                    <h3>Create a Simple Webpage Using HTML:</h3>
                    <p class="objective-desc">Objective: Understand basic HTML elements and structure.</p>
                    <p class="actions-desc">Actions: Build a webpage with headings, paragraphs, images, and links.</p>
                </li>
                <li>
                    <h3>Style the Webpage Using CSS:</h3>
                    <p class="objective-desc">Objective: Learn how to apply styling with CSS.</p>
                    <p class="actions-desc">Actions: Add colors, fonts, spacing, and layout adjustments to the webpage.</p>
                </li>
                <li>
                    <h3>Add Basic JavaScript for Interactivity:</h3>
                    <p class="objective-desc">Objective: Implement simple interactions using JavaScript.</p>
                    <p class="actions-desc">Actions: Create a button that triggers an alert message when clicked.</p>
                    <button id="alertBtn">Click Me!</button>
                </li>
            </ol>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f7f6;
    color: #444;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
}

.container {
    max-width: 900px;
    margin: 0 auto;
    background-color: #fff;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 30px;
}

nav {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
    border-bottom: 2px solid #ddd;
    padding-bottom: 15px;
}

.nav-link {
    text-decoration: none;
    color: #3498db;
    font-weight: bold;
    font-size: 1.1em;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: #2980b9;
}

.section {
    margin-top: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.section h2 {
    color: #e74c3c;
    border-bottom: 2px solid #e74c3c;
    padding-bottom: 5px;
    margin-top: 0;
}

/* Lazy Loading CSS */
.lazy-image {
    width: 100%;
    height: auto;
    display: block;
    min-height: 200px; /* Prevents layout shift */
    background-color: #f0f0f0;
}
// Task 5.1: Build a Full Web Application (Simple SPA Routing)
const appContent = document.getElementById('app-content');

const routes = {
    'home': '<h2>Home Page</h2><p>Welcome to the final project! This is the home page content.</p>',
    'about': '<h2>About Us</h2><p>This is a demonstration of a single-page application (SPA).</p>',
    'contact': '<h2>Contact Us</h2><p>You can find our contact information here.</p>'
};

function navigate(hash) {
    const route = hash.substring(1); // Remove '#'
    appContent.innerHTML = routes[route] || routes['home'];
}

// Listen for hash changes in the URL
window.addEventListener('hashchange', () => navigate(window.location.hash));

// Initial page load
if (window.location.hash === '') {
    window.location.hash = '#home';
} else {
    navigate(window.location.hash);
}

// Task 5.2: Optimize for Performance (Lazy Loading)
document.addEventListener('DOMContentLoaded', function() {
    const lazyImages = document.querySelectorAll('.lazy-image');

    const observerOptions = {
        root: null, // relative to the viewport
        rootMargin: '0px',
        threshold: 0.1 // 10% of image is visible
    };

    const imageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                const image = entry.target;
                image.src = image.dataset.src;
                image.classList.add('loaded');
                observer.unobserve(image); // Stop observing once loaded
            }
        });
    }, observerOptions);

    lazyImages.forEach(function(image) {
        imageObserver.observe(image);
    });
});
